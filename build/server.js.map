{"version":3,"sources":["../src/server.js"],"names":["require","config","startServer","app","stripe","use","express","json","server","ApolloServer","typeDefs","resolvers","context","req","res","next","Auth","applyMiddleware","get","send","post","Price","body","paymentIntents","create","amount","Math","round","currency","paymentIntent","clientSecret","client_secret","mongoose","connect","Config","db","url","useNewUrlParser","useCreateIndex","useUnifiedTopology","useFindAndModify","then","console","log","err","process","exit","listen","port","env","PORT","e","graphqlPath"],"mappings":"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","sourcesContent":["\r\nrequire('dotenv').config();\r\nimport { ApolloServer, gql } from \"apollo-server-express\";\r\nimport express from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport typeDefs from \"./schemas\";\r\nimport resolvers from \"./resolvers\";\r\nimport * as Config from \"./configs\";\r\nimport cors from \"cors\";\r\nimport Auth from \"./middleware/Auth\";\r\n\r\nconst startServer = async () => {\r\n  const app = express();\r\n  const stripe = require(\"stripe\")(\"sk_test_51IdKa0EWLULmTbAKV5JLEAXK4XalxwTWVRVYc9nl2bUEeHLnvZ8IFXnuxUdNjtVT0nktMU79VVeuDsSHE58KO5nF00Bjcw0zFE\");\r\n  app.use(express.static(\".\"));\r\n  app.use(express.json());\r\n  // const corsOptions = {\r\n  //   origin: process.env.CORS_ORIGIN,\r\n  //   credentials: true,\r\n  //   optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\r\n  // };\r\n \r\n  const server = new ApolloServer({\r\n    typeDefs,\r\n    resolvers,\r\n    context:({req,res,next}) => {return {req,res,next}}\r\n  });\r\n  app.use(Auth);\r\n  server.applyMiddleware({ app });\r\n\r\n\r\n  app.get(\"/\", async (req, res) => {\r\n    \r\n    res.send(\"API WORKING\");\r\n  });\r\n  app.post(\"/create-payment-intent\", async (req, res) => {\r\n    const { Price } = req.body;\r\n\r\n    // Create a PaymentIntent with the order amount and currency\r\n    const paymentIntent = await stripe.paymentIntents.create({\r\n      amount: Math.round((Price*100)),\r\n      currency: \"usd\"\r\n\r\n    });\r\n\r\n    res.send({\r\n      clientSecret: paymentIntent.client_secret\r\n    });\r\n\r\n  });\r\n\r\n  await mongoose\r\n    .connect(Config.db.url, {\r\n      useNewUrlParser: true,\r\n      useCreateIndex: true,\r\n      useUnifiedTopology: true,\r\n      useFindAndModify:true\r\n    })\r\n    .then(() => {\r\n      console.log(\"Successfully connect to database\");\r\n    })\r\n    .catch((err) => {\r\n      console.log('couldn\"t not connect to database', err);\r\n      process.exit(-1);\r\n    });\r\n\r\n  app.listen({ port: process.env.PORT }, (e) =>\r\n    console.log(\r\n      `ðŸš€ GraphQl ready at http://localhost:${process.env.PORT}${server.graphqlPath}`\r\n    )\r\n  );\r\n};\r\n\r\nstartServer();\r\n// require('dotenv').config()\r\n// const app = require(\"./services/server.service\");\r\n// const mongoService = require(\"./services/mongoose.service\");\r\n\r\n// mongoService.dbConnect();\r\n// app.start();"],"file":"server.js"}